services:

  read:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - "3101:3100"
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      bank_network:
        aliases:
          - loki

  write:
    image: grafana/loki:3.1.2
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - "3102:3100"
      - "7946"
      - "9095"
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:v1.5.1
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - "12345:12345"
    depends_on:
      - gateway
    networks:
      - bank_network

  minio:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - bank_network

  grafana:
    image: grafana/grafana:11.4.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bank_network

  gateway:
    image: nginx:1.27.3
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1
        
        events {
          worker_connections   1000;
        }
        
        http {
          resolver 127.0.0.11;
        
          server {
            listen             3100;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
        
            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bank_network

  redis:
    image: redis:latest
    container_name: redis_ms
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 500M
    networks:
      - bank_network

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 5s

  accountsdb:
    image: mysql
    container_name: accountsdb
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: accounts_db

    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 5s
    networks:
      - bank_network

  loansdb:
    image: mysql
    container_name: loansdb
    ports:
      - "3307:3306"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: loans_db

    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 5s
    networks:
      - bank_network

  loansdb2:
    image: mysql
    container_name: loansdb-2
    ports:
      - "3309:3306"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: loans_db_2

    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 5s
    networks:
      - bank_network

  cardsdb:
    image: mysql
    container_name: cardsdb
    ports:
      - "3308:3306"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: cards_db

    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 5s
    networks:
      - bank_network

  rabbit:
    image: "rabbitmq:3.13-management"
    container_name: Rabbit
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"

    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s

    networks:
      - bank_network


  configserver:
    image: "prabal864/java-spring:Config-Server-S10"
    container_name: configserver-ms
    ports:
      - "8084:8084"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 700M

    healthcheck:
      test: curl --fail --silent http://configserver:8084/actuator/health/readiness | grep UP || exit 1
      interval: 30s
      timeout: 5s
      retries: 20
    depends_on:
      rabbit:
        condition: service_healthy
    networks:
      - bank_network
    environment:
       SPRING_RABBITMQ_HOST: "rabbit"

  eurekaserver:
    image: "prabal864/java-spring:Eureka-Server-S10"
    container_name: Eurekaserver-ms
    ports:
      - "8761:8761"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 700M

    healthcheck:
      test: curl --fail --silent http://eurekaserver:8761/actuator/health/readiness | grep UP || exit 1
      interval: 30s
      timeout: 5s
      retries: 20
    depends_on:
      configserver:
        condition: service_healthy
    networks:
      - bank_network
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8084/"

  account:
    image: "prabal864/java-spring:Accounts-S10"
    container_name: Account-MS
    ports:
      - "8081:8081"

    depends_on:
      eurekaserver:
        condition: service_healthy
      accountsdb:
        condition: service_healthy

    deploy:
      resources:
        limits:
            cpus: "1"
            memory: 700M
    networks:
      - bank_network
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8084/"
      SPRING_PROFILES_ACTIVE: default
      SPRING_APPLICATION_NAME: "accounts"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_DATASOURCE_URL: "jdbc:mysql://accountsdb:3306/accounts_db"
      SPRING_DATASOURCE_USERNAME: "root"
      SPRING_DATASOURCE_PASSWORD: "root"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8761/eureka/"


  loan:
    image: "prabal864/java-spring:Loans-S10"
    container_name: Loan_MS
    ports:
      - "8082:8082"

    depends_on:
      eurekaserver:
        condition: service_healthy
      loansdb:
        condition: service_healthy

    deploy:

      resources:
        limits:
          cpus: "1"
          memory: 700M
    networks:
      - bank_network
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8084/"
      SPRING_PROFILES_ACTIVE: default
      SPRING_APPLICATION_NAME: "loans"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb:3306/loans_db"
      SPRING_DATASOURCE_USERNAME: "root"
      SPRING_DATASOURCE_PASSWORD: "root"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8761/eureka/"

  loan1:
    image: "prabal864/java-spring:Loans-S10"
    container_name: Loan_MS_1
    ports:
      - "8089:8082"

    depends_on:
      eurekaserver:
        condition: service_healthy
      loansdb:
        condition: service_healthy

    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 700M
    networks:
      - bank_network
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8084/"
      SPRING_PROFILES_ACTIVE: default
      SPRING_APPLICATION_NAME: "loans"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_DATASOURCE_URL: "jdbc:mysql://loansdb2:3306/loans_db_2"
      SPRING_DATASOURCE_USERNAME: "root"
      SPRING_DATASOURCE_PASSWORD: "root"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8761/eureka/"


  cards:
    image: "prabal864/java-spring:Cards-S9"
    container_name: Cards_MS
    ports:
      - "8083:8083"
    depends_on:
      eurekaserver:
        condition: service_healthy
      cardsdb:
        condition: service_healthy

    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 700M
    networks:
      - bank_network
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8084/"
      SPRING_PROFILES_ACTIVE: default
      SPRING_APPLICATION_NAME: "cards"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_DATASOURCE_URL: "jdbc:mysql://cardsdb:3306/cards_db"
      SPRING_DATASOURCE_USERNAME: "root"
      SPRING_DATASOURCE_PASSWORD: "root"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8761/eureka/"

  gatewayserver:
    image: "prabal864/java-spring:Gateway-Server-S10"
    container_name: Gateway_MS
    ports:
      - "8072:8072"
    depends_on:
      eurekaserver:
        condition: service_healthy
      rabbit:
        condition: service_healthy
      redis:
        condition: service_healthy

    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 700M
    networks:
      - bank_network
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8084/"
      SPRING_APPLICATION_NAME: "gatewayserver"
      SPRING_RABBITMQ_HOST: "rabbit"
      SPRING_DATA_REDIS_HOST: "redis"
      SPRING_DATA_REDIS_PORT: "6379"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: "2s"


networks:
  bank_network:
    driver: bridge

